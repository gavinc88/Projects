/* HashTableChained.java */

package hashdict;

/* Standard DList from hw4. Replace import path with your own if necessary */
import list2.*;

/**
 *  HashTableChained implements a Dictionary as a hash table with chaining.
 *  All objects used as keys must have a valid hashCode() method, which is
 *  used to determine which bucket of the hash table an entry is stored in.
 *  Each object's hashCode() is presumed to return an int between
 *  Integer.MIN_VALUE and Integer.MAX_VALUE.  The HashTableChained class
 *  implements only the compression function, which maps the hash code to
 *  a bucket in the table's range.
 *
 *  DO NOT CHANGE ANY PROTOTYPES IN THIS FILE.
 **/

public class HashTableChained implements Dictionary {

    /**
     *  Place any data fields here.
     **/

    private DList[] hashTable;
    private int elementCount = 0;


    /** 
     *  Construct a new empty hash table intended to hold roughly sizeEstimate
     *  entries.  (The precise number of buckets is up to you, but we recommend
     *  you use a prime number, and shoot for a load factor between 0.5 and 1.)
     *  
     *  @param estimated size of the table desired
     **/

    public HashTableChained(int sizeEstimate) {
        hashTable = new DList[findPrime(sizeEstimate, sizeEstimate)];
        for(int i = 0; i < hashTable.length; i++){
            hashTable[i] = null;
        }
    }


    /** 
     *  Construct a new empty hash table with a default size.  Say, a prime in
     *  the neighborhood of 100.
     **/

    public HashTableChained() {
        hashTable = new DList[101];
        for(int i = 0; i < hashTable.length; i++){
            hashTable[i] = null;
        }
    }

    /** 
     *  Returns the number of entries stored in the dictionary.  Entries with
     *  the same key (or even the same key and value) each still count as
     *  a separate entry.
     *  @return number of entries in the dictionary.
     **/

    public int size() {
        // Replace the following line with your solution.
        return elementCount;
    }

    /** 
     *  Tests if the dictionary is empty.
     *
     *  @return true if the dictionary has no entries; false otherwise.
     **/

    public boolean isEmpty() {
        if(elementCount != 0){
            return false;
        }
        return true;
    }

    /**
     *  Create a new Entry object referencing the input key and associated value,
     *  and insert the entry into the dictionary.  Return a reference to the new
     *  entry.  Multiple entries with the same key (or even the same key and
     *  value) can coexist in the dictionary. Default load factor criteria for
     *  resizing is 0.75.
     *
     *  This method should run in O(1) time if the number of collisions is small.
     *
     *  @param key the key by which the entry can be retrieved.
     *  @param value an arbitrary object.
     *  @return an entry containing the key and value.
     **/

    public Entry insert(Object key, Object value) {

        if((double)this.elementCount / (double)hashTable.length > 0.75){
            resize();
        }

        Entry newEntry = new Entry();
        newEntry.key = key;
        newEntry.value = value;
        int hashValue = compFunction(newEntry.key.hashCode());
        if(hashTable[hashValue] == null){
            hashTable[hashValue] = new DList();
            hashTable[hashValue].insertBack(newEntry);
        }else{
            hashTable[hashValue].insertBack(newEntry);
        }
        elementCount += 1;


        return newEntry;
    }
    /** 
     *  For testing purposes; Determines the number of collisions in the given hash table.
     *  @return number of collisions in the dictionary.
     **/
    public int getCollisions(){
        int counter = 0;
        for(int i = 0; i < this.hashTable.length; i++){
            if(this.hashTable[i] != null){
                DListNode current = (DListNode) this.hashTable[i].front();
                while(current.isValidNode()){
                    try {
                        if(current.next().isValidNode()){
                            counter += 1;
                        }
                        current = (DListNode)current.next();   
                    } catch (InvalidNodeException e) {
                        System.out.println("Invalid Node operated on by resize().");
                        e.printStackTrace();
                    }
                }
            }
        }
        System.out.println("The number of collisions is: " + counter);
        return counter;  
    }

    /** 
     *  Search for an entry with the specified key.  If such an entry is found,
     *  return it; otherwise return null.  If several entries have the specified
     *  key, choose one arbitrarily and return it.
     *
     *  This method should run in O(1) time if the number of collisions is small.
     *
     *  @param key the search key.
     *  @return an entry containing the key and an associated value, or null if
     *          no entry contains the specified key.
     **/

    public Entry find(Object key) {
        // Replace the following line with your solution.
        int hashValue = compFunction(key.hashCode());  
        if(hashTable[hashValue] == null){
            return null;
        }else{
            try {
                DListNode current = hashTable[hashValue].front();
                for(int i = 0; i < hashTable[hashValue].length(); i++){
                    Entry result = (Entry)hashTable[hashValue].front().item();
                    if(key.equals(result.key())){
                        return result;
                    }
                    current = current.next();
                }
                return null;
            } catch (InvalidNodeException e) {
                return null;
            }
        }
    }

    /** 
     *  Remove an entry with the specified key.  If such an entry is found,
     *  remove it from the table and return it; otherwise return null.
     *  If several entries have the specified key, choose one arbitrarily, then
     *  remove and return it.
     *
     *  This method should run in O(1) time if the number of collisions is small.
     *
     *  @param key the search key.
     *  @return an entry containing the key and an associated value, or null if
     *          no entry contains the specified key.
     */

    public Entry remove(Object key) {
        int hashValue = compFunction(key.hashCode());
        if(hashTable[hashValue] == null){
            return null;
        }else{
            try {
                DListNode current = hashTable[hashValue].front();
                for(int i = 0; i < hashTable[hashValue].length(); i++){
                    Entry result = (Entry)hashTable[hashValue].front().item();
                    if(key.equals(result.key())){
                        current.remove();
                        elementCount--;
                        return result;
                    }
                    current = current.next();
                }
                return null;
            } catch (InvalidNodeException e) {
                return null;
            }
        }
    }

    /**
     *  Remove all entries from the dictionary.
     */
    public void makeEmpty() {
        // Your solution here.
        for(int i = 0; i < hashTable.length; i++){
            hashTable[i] = null;
        }
        elementCount = 0;
    }

    /**
     *  Converts a hash code in the range Integer.MIN_VALUE...Integer.MAX_VALUE
     *  to a value in the range 0...(size of hash table) - 1.
     *
     *  This function should have package protection (so we can test it), and
     *  should be used by insert, find, and remove.
     **/

    protected int compFunction(int code) {
        // Replace the following line with your solution.
        int hashValue;

        hashValue = code%hashTable.length;
        if(hashValue< 0){
            hashValue += hashTable.length;
        }
        return hashValue;
    }

    /** 
     *  Internally used by insert() to resize the hash table if the load factor becomes too large.
     *  Creates a new hash table array double the size of the current one and duplicates the entries
     *  into the new hash array. The hash table ADT will now use the new hash table to store entries.
     **/

    private void resize(){
        DList[] newHashTable = new DList[hashTable.length*2];
        DList[] oldHashTable = this.hashTable;

        for(int i = 0; i < newHashTable.length; i++){
            newHashTable[i] = null;
        }

        this.hashTable = newHashTable;
        this.elementCount = 0;

        for(int i = 0; i < oldHashTable.length; i++){
            if(oldHashTable[i] != null){
                DListNode current = (DListNode) oldHashTable[i].front();
                while(current.isValidNode()){
                    try {
                        this.insert(((Entry)current.item()).key(), ((Entry)current.item()).value());
                        current = (DListNode)current.next();
                    } catch (InvalidNodeException e) {
                        System.out.println("Invalid Node operated on by resize().");
                        e.printStackTrace();
                    }
                }
            }
        }
    }


    /** 
     *  Internally used by the constructor to determine the size of the array
     *  when a size estimate is provided.
     *  @param sizeEstimate Estimated number of entries into the hashTable
     *  @param minimum minimum size of the prime requested
     *  @return a prime number
     **/

    private static int findPrime(int sizeEstimate, int minimum){
        boolean[] sieve = new boolean[sizeEstimate*2 + 1];

        for(int l = 0; l < sieve.length; l++){
            sieve[l] = true;
        }

        for(int j = 2; j<= sieve.length/2; j++){
            if(sieve[j]){
                int i = 2;
                int k = i * j;
                while(k<sieve.length){
                    sieve[k] = false;
                    i += 1;
                    k= i*j;
                }
            }
        }

        for(int i = 2; i < sieve.length; i++){
            if(sieve[i] && ((float)sizeEstimate/(float)i) < 1 && ((float)sizeEstimate/(float)i) > 0.5){
                if(i > minimum){
                    return i;
                }
            }
        }
        return 0;
    }

    /** 
     *  Calculates the load factor of this hash table and prints it
     *  to console.
	 *
     **/
    public void getLoadFactor(){
        double loadFactor = (double)elementCount / (double)this.hashTable.length;
        System.out.println("The number of elements is currently: " + this.elementCount);
        System.out.println("The number of buckets is currently: " + this.hashTable.length);
        System.out.println("The load factor is currently: " + loadFactor);
    }


}
